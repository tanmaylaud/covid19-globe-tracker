{"version":3,"sources":["assets/world.jpg","markers.ts","markerRenderer.ts","Spinner.tsx","App.tsx","index.tsx"],"names":["module","exports","markers","usMarkers","i","length","push","markerRenderer","marker","Math","max","value","geometry","THREE","material","color","transparent","opacity","mesh","rotation","y","PI","Spinner","props","loaded","className","App","useState","details","setDetails","isLoaded","onTextureLoaded","maxDistanceRadiusScale","autoRotateSpeed","distanceRadiusScale","window","width","innerWidth","height","innerHeight","getWindowDimensions","windowDimensions","onClickMarker","markerObject","event","zoomOut","Country","activeCases","getTooltipContent","setTimeout","markerOptions","renderer","onDefocus","previousCoordinates","onMouseOverMarker","onMouseOutMarker","cameraOptions","focusOptions","enableDefocus","globeOptions","texture","worldTexture","glowColor","enableClouds","Counter","globalData","totalCount","total","counter","setCounter","useEffect","toString","replace","rootElement","document","getElementById","render"],"mappings":"q3gCAAAA,EAAOC,QAAU,IAA0B,mC,6KCQ3C,I,mCAJMC,E,MAEAC,E,MAEGC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IACpCF,EAAQI,KAAKH,EAAUC,IAEVF,Q,OCIA,SAASK,EAAeC,GACxBC,KAAKC,IAAIF,EAAOG,MAAQ,GAAI,GAAzC,IACMC,EAAW,IAAIC,cAAkB,EAAG,EAAGL,EAAOG,MAAQ,GAEtDG,EAAW,IAAID,oBAAwB,CAC3CE,MAAO,IAAIF,QAAY,OACvBG,aAAa,EACbC,QAAS,KAILC,EAAO,IAAIL,OAAWD,EAAUE,GAMtC,OALAI,EAAKC,SAASC,EAAIX,KAAKY,GAKhBH,E,iCC9BF,SAASI,EAAQC,GACtB,OAAQA,EAAMC,OAIV,KAHF,yBAAKC,UAAU,YACb,yBAAKA,UAAU,a,YCeN,SAASC,IAAO,IAAD,EACEC,mBAAc,MADhB,mBACrBC,EADqB,KACZC,EADY,OAEQF,oBAAS,GAFjB,mBAErBG,EAFqB,KAEXC,EAFW,OAGcJ,mBAAS,CACjDK,uBAAwB,IACxBC,gBAAiB,GACjBC,oBAAqB,MANK,gCASoBP,mBAjBlD,WAAgC,IAAD,EACsBQ,OACnD,MAAO,CACLC,MAH2B,EACrBC,WAGNC,OAJ2B,EACFC,aAiBzBC,KAV0B,mBASrBC,EATqB,UAiB5B,SAASC,EACPlC,EACAmC,EACAC,GAEAC,IACAhB,EAVF,SAA2BrB,GACzB,MAAM,aAAN,OAAoBA,EAAOsC,QAA3B,2BAAqDtC,EAAOuC,YAA5D,KASWC,CAAkBxC,IAO/B,IAAMqC,EAAU,WACdI,YAAW,WACLR,EAAiBL,OAAS,KAC5BP,EAAW,QAEZ,MAGL,OACE,gBAAC,WAAD,KACE,gBAAC,EAAD,CAASL,OAAQM,IACjB,uBAAKL,UAAU,WAAf,yBACA,uBAAKA,UAAU,WAAf,gBACA,uBAAKA,UAAU,SACb,gBAAC,IAAD,CACEvB,QAASA,EACTgD,cAAe,CAAEC,SAAU5C,GAC3B6C,UArBR,SAAmBC,EAA0BT,GAC3Cf,EAAW,OAqBLa,cAAeA,EACfY,kBAAmBZ,EACnBa,iBAAkB,kBAAM1B,EAAW,OACnC2B,cAAe,CACbxB,uBAAwB,IACxBC,gBAAiB,GACjBC,oBAAqB,KAEvBuB,aAAc,CACZvB,oBAAqB,GACrBwB,eAAe,GAEjBC,aAAc,CACZC,QAASC,IACTC,UAAW,MACXC,cAAc,GAEhBhC,gBAAiB,kBAAMA,GAAgB,MAExCH,GACC,uBAAKH,UAAU,WACb,6BAAKG,KAIVE,EACC,uBAAKL,UAAU,UACb,gBAACuC,EAAD,OAEA,MAKV,SAASA,IAAW,IAAD,EACSrC,mBAASsC,EAAWC,YAD7B,mBACVC,EADU,aAEaxC,mBAAS,IAFtB,mBAEVyC,EAFU,KAEDC,EAFC,KAkBjB,OAfAC,qBAAU,WACRrB,YAAW,kBAAM,OAAM,OACtB,IACHqB,qBAAU,WACJF,GAAWD,IACTA,EAAQC,GAAW,IAAOC,EAAWD,EAAU,GAC1CA,EAAU,IAAOC,EAAWD,EAAU,KACtCA,EAAU,KAAQC,EAAWD,EAAU,OAEjD,CAACA,IAMG,yBAAqBA,EAHjBG,WAAWC,QAAQ,wBAAyB,M,YCjHnDC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,kBAAClD,EAAD,MAAS+C,K","file":"static/js/main.0e2547c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world.646e6417.jpg\";","import { Marker } from \"react-globe\";\nimport data from \"./assets/export.json\";\nimport usData from \"./assets/usExport.json\";\n//@ts-ignore\nconst markers: Marker[] = data;\n//@ts-ignore\nconst usMarkers: Marker[] = usData;\n\nfor (let i = 0; i < usMarkers.length; i++) {\n  markers.push(usMarkers[i]);\n}\nexport default markers;\n","//@ts-ignore\nimport * as TWEEN from \"es6-tween\";\nimport * as THREE from \"three\";\n\nimport { Marker } from \"react-globe\";\n\nfunction random(scaleFactor: number): number {\n  return Math.random() > 0.5\n    ? scaleFactor * Math.random()\n    : -scaleFactor * Math.random();\n}\n\n//const MARKER_COLOR = \"#fcffbe\";\nconst MARKER_COMPANION_COLOR = \"#fff9e6\";\n\nexport default function markerRenderer(marker: Marker): THREE.Object3D {\n  const size = Math.max(marker.value / 20, 1);\n  const geometry = new THREE.BoxGeometry(5, 5, marker.value / 2);\n\n  const material = new THREE.MeshPhongMaterial({\n    color: new THREE.Color(\"red\"),\n    transparent: true,\n    opacity: 0.8,\n  });\n\n  // add light\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.rotation.y = Math.PI;\n  /*const light = new THREE.PointLight(\"#fcffbe\", 0, 1, marker.value);\n  mesh.children = [];\n  mesh.add(light);\n*/\n  return mesh;\n}\n","import React from \"react\";\nimport \"./Spinner.css\";\nexport function Spinner(props: { loaded: boolean }) {\n  return !props.loaded ? (\n    <div className=\"spinbody\">\n      <div className=\"spinner\"></div>\n    </div>\n  ) : null;\n}\n","import * as React from \"react\";\nimport ReactGlobe, { Marker } from \"react-globe\";\n\nimport markers from \"./markers\";\nimport markerRenderer from \"./markerRenderer\";\nimport worldTexture from \"./assets/world.jpg\";\nimport \"./styles.css\";\nimport { useState, useEffect } from \"react\";\nimport { Object3D } from \"three\";\nimport { Spinner } from \"./Spinner\";\nimport globalData from \"./assets/global.json\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport default function App() {\n  const [details, setDetails] = useState<any>(null);\n  const [isLoaded, onTextureLoaded] = useState(false);\n  const [cameraOptions, setCameraOptions] = useState({\n    maxDistanceRadiusScale: 100,\n    autoRotateSpeed: 0.1,\n    distanceRadiusScale: 100,\n  });\n\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  function getTooltipContent(marker: Marker) {\n    return `Location: ${marker.Country} (Active Cases: ${marker.activeCases})`;\n  }\n\n  function onClickMarker(\n    marker: Marker,\n    markerObject?: Object3D,\n    event?: PointerEvent\n  ) {\n    zoomOut();\n    setDetails(getTooltipContent(marker));\n  }\n\n  function onDefocus(previousCoordinates: any, event?: PointerEvent) {\n    setDetails(null);\n  }\n\n  const zoomOut = () => {\n    setTimeout(() => {\n      if (windowDimensions.width <= 500) {\n        setDetails(null);\n      }\n    }, 2000);\n  };\n\n  return (\n    <React.Fragment>\n      <Spinner loaded={isLoaded} />\n      <div className=\"header1\">COVID19 Globe Tracker</div>\n      <div className=\"header2\">Active Cases</div>\n      <div className=\"globe\">\n        <ReactGlobe\n          markers={markers}\n          markerOptions={{ renderer: markerRenderer }}\n          onDefocus={onDefocus}\n          onClickMarker={onClickMarker}\n          onMouseOverMarker={onClickMarker}\n          onMouseOutMarker={() => setDetails(null)}\n          cameraOptions={{\n            maxDistanceRadiusScale: 100,\n            autoRotateSpeed: 0.1,\n            distanceRadiusScale: 100,\n          }}\n          focusOptions={{\n            distanceRadiusScale: 30,\n            enableDefocus: true,\n          }}\n          globeOptions={{\n            texture: worldTexture,\n            glowColor: \"red\",\n            enableClouds: false,\n          }}\n          onTextureLoaded={() => onTextureLoaded(true)}\n        />\n        {details && (\n          <div className=\"details\">\n            <p> {details}</p>\n          </div>\n        )}\n      </div>\n      {isLoaded ? (\n        <div className=\"footer\">\n          <Counter />\n        </div>\n      ) : null}\n    </React.Fragment>\n  );\n}\n\nfunction Counter() {\n  const [total, setTotal] = useState(globalData.totalCount);\n  const [counter, setCounter] = useState(0);\n  useEffect(() => {\n    setTimeout(() => null, 5000);\n  }, []);\n  useEffect(() => {\n    if (counter != total) {\n      if (total - counter == 10000) setCounter(counter + 1);\n      else if (counter < 10000) setCounter(counter + 100);\n      else if (counter < 100000) setCounter(counter + 50);\n    }\n  }, [counter]);\n\n  function numberWithCommas(x: number) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  return <p>{numberWithCommas(counter)}</p>;\n}\n","import App from \"./App\";\nimport { render } from \"react-dom\";\nimport React from \"react\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}